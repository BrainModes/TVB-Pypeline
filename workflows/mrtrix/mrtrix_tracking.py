
# coding: utf-8

# # Pipeline MRTrix 0.2 tractography workflow

# This workflow has to be connected straight subsequentially to the <b>MRTrix 0.2 preprocessing workflow</b>.
# Continuing on the files generated by it's predecessor, this workflow will perform the actual fiber tracking for a <b>single seed mask</b>. Thus it will generate a single tractograpy file and it intended to be run in parallel by a surounding scaffold workflow.

# In[82]:

import nipype.interfaces.mrtrix as mrt
# import numpy as np
from nipype import Node, Workflow
from nipype.interfaces.utility import IdentityInterface

import logging, re


# ### Start the logging

# In[9]:

logger = logging.getLogger('interface')
logger.setLevel(logging.INFO)
# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
# create formatter
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
# add formatter to ch
ch.setFormatter(formatter)
# add ch to logger
logger.addHandler(ch)


# ### Define Input- and Output-Node

# In[78]:

inputNode = Node(IdentityInterface(fields = ['wmmask_1mm',
                                            'spherical_harmonics_image',
                                            'seedmask',
                                            'targetmask',
                                            'seed_count',
                                            'tracks_dir']), 
                 name = 'input_node')

outputNode = Node(IdentityInterface(fields = ['tck_file']), 
                  name = 'output_node')


# ### Utility functions

# In[72]:

def getSeedmaskIndex(seedmask):
    res = re.search("\d{4,999}", seedmask)
    return res.group()

def fileNameBuild(path, seedmask):
    seedMskIdx = getSeedmaskIndex(seedmask)
    return path + '/' + seedMskIdx + '_tracks.tck'


# ### Perform the fiber tracking

# In[68]:

trackingNode = Node(mrt.StreamlineTrack(), name = 'tracking_node')
trackingNode.inputs.inputmodel = 'SD_PROB'
trackingNode.inputs.minimum_tract_length = 30 #Min length set to 30mm here
trackingNode.inputs.stop = True
trackingNode.inputs.no_mask_interpolation = True
trackingNode.inputs.unidirectional = True


# ### Define the workflow

# In[80]:

wf = Workflow('tracking_workflow')

wf.connect([
        (inputNode, trackingNode, [('spherical_harmonics_image', 'in_file'),
                                  ('seedmask', 'seed_file'),
                                  ('targetmask', 'include_file'),
                                  ('wmmask_1mm', 'mask_file'),
                                  ('seed_count', 'desired_number_of_tracks'),
                                  (('tracks_dir', fileNameBuild, 'seedmask'), 'out_file')]),
        (trackingNode, outputNode, [('tracked', 'tck_file')])
    ])


# In[83]:

#wf.write_graph("workflow_graph.dot")
#from IPython.display import Image
#Image(filename="workflow_graph.dot.png")


# In[ ]:



